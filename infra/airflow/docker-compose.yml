services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.10.2
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__WEBSERVER__RBAC: "True"
      AIRBYTE_URL: ${AIRBYTE_URL}
      AIRBYTE_API_KEY: ${AIRBYTE_API_KEY}
      DBT_PROFILES_DIR: /opt/airflow/project/dbt/profiles
    ports:
      - "8080:8080"
    volumes:
      - ../../dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: webserver
    restart: unless-stopped

  airflow-scheduler:
    image: apache/airflow:2.10.2
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRBYTE_URL: ${AIRBYTE_URL}
      AIRBYTE_API_KEY: ${AIRBYTE_API_KEY}
      DBT_PROFILES_DIR: /opt/airflow/project/dbt/profiles
    volumes:
      - ../../dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    restart: unless-stopped

  airflow-triggerer:
    image: apache/airflow:2.10.2
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      DBT_PROFILES_DIR: /opt/airflow/project/dbt/profiles
    volumes:
      - ../../dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: triggerer
    restart: unless-stopped

  airflow-init:
    image: apache/airflow:2.10.2
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USER:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASS:-admin}
      _AIRFLOW_WWW_USER_EMAIL: ${AIRFLOW_ADMIN_EMAIL:-admin@example.com}
      _AIRFLOW_WWW_USER_FIRSTNAME: Camilla
      _AIRFLOW_WWW_USER_LASTNAME: Rodrigues
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      DBT_PROFILES_DIR: /opt/airflow/project/dbt/profiles
    volumes:
      - ../../dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
      - ../..:/opt/airflow/project
    entrypoint: /bin/bash
    command: -c "pip install --no-cache-dir -r /requirements.txt && airflow db migrate && airflow users create --role Admin --username ${AIRFLOW_ADMIN_USER:-admin} --password ${AIRFLOW_ADMIN_PASS:-admin} --email ${AIRFLOW_ADMIN_EMAIL:-admin@example.com} --firstname Camilla --lastname Rodrigues || true"

volumes:
  postgres-db-volume:
